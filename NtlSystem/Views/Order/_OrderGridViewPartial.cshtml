@using NtlSystem.Models;
@using System.Collections.Generic;

@{
    dbNtlSystemEntities db = new dbNtlSystemEntities();

    Dictionary<int, string> detailDict = new Dictionary<int, string>();
    db.TNtlDetails.ToList().ForEach(it =>
    {
        detailDict.Add(it.id, it.last_updated_by);
    });

    Dictionary<int, string> statusDict = new Dictionary<int, string>();
    db.TNtlStatus.ToList().ForEach(it =>
    {
        statusDict.Add(it.id, it.name);
    });

    Dictionary<string, string> statusNameDict = new Dictionary<string, string>(){
        { "Draft", "Quotation" },
        { "Quotation", "Sale" },
        { "Sale", "Delivery" },
        { "Delivery", "" }
    };

    int c_ord_sta_id = DbStoredProcedure.GetStatusID("Delivery", "Order");

    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "OrderGridView";
        settings.CallbackRouteValues = new { Controller = "Order", Action = "OrderGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Order", Action = "OrderGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Order", Action = "OrderGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Order", Action = "OrderGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.Width = Unit.Percentage(100);

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.SettingsSearchPanel.Visible = true;

        settings.Columns.Add(col =>
        {
            col.FieldName = "id";
            col.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
            col.Visible = false;
            col.ReadOnly = true;
        });

        settings.Columns.Add("name").Caption = "Title";

        // Order Placement Date
        settings.Columns.Add(col =>
        {
            col.FieldName = "created_date";
            col.Caption = "Placement Date";

            col.ColumnType = MVCxGridViewColumnType.DateEdit;
            col.PropertiesEdit.DisplayFormatString = "yyyy-MM-dd";

            DateEditProperties prop = col.PropertiesEdit as DateEditProperties;
            prop.DisplayFormatString = "yyyy-MM-dd";
            prop.DisplayFormatInEditMode = true;
        });

        // Select Order Status
        settings.Columns.Add(col =>
        {
            col.FieldName = "status_id";
            col.Caption = "Status";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TNtlStatus.Where(it => it.type.ToLower().Equals("order")).ToList();
            prop.TextField = "name";
            prop.ValueField = "id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        // Select Customer
        settings.Columns.Add(col =>
        {
            col.FieldName = "customer_id";
            col.Caption = "Customer";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TNtlCustomers.ToList();
            prop.TextField = "name";
            prop.ValueField = "id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        // Total Price
        settings.Columns.Add(col =>
        {
            col.FieldName = "total_price";
            col.Caption = "Total Price";

            col.ColumnType = MVCxGridViewColumnType.SpinEdit;
            SpinEditProperties prop = col.PropertiesEdit as SpinEditProperties;
            prop.NumberType = SpinEditNumberType.Float;
            prop.MinValue = 0;
            prop.MaxValue = 10000000;
            prop.Increment = 0.1M;
            prop.DisplayFormatString = "C";
        });

        // Complete Button
        settings.Columns.Add(col =>
        {
            col.FieldName = "Complete?";
            col.UnboundType = DevExpress.Data.UnboundColumnType.String;
            col.PropertiesEdit.EncodeHtml = false;

            col.EditFormSettings.Visible = DefaultBoolean.False;
        });

        // Last Updated By
        settings.Columns.Add(col =>
        {
            col.FieldName = "Last Updated By";
            col.UnboundType = DevExpress.Data.UnboundColumnType.String;
            col.ReadOnly = true;
        });

        settings.CustomUnboundColumnData = (s, e) =>
        {
            if (e.Column.FieldName.Equals("Last Updated By"))
            {
                int detail_id = int.Parse(e.GetListSourceFieldValue("detail_id").ToString());
                e.Value = detailDict[detail_id];
            };

            if (e.Column.FieldName.Equals("Complete?"))
            {
                int order_id = int.Parse(e.GetListSourceFieldValue("id").ToString());
                int ord_sta_id = int.Parse(e.GetListSourceFieldValue("status_id").ToString());
                string status = statusDict[ord_sta_id];
                string to_disable = (ord_sta_id == c_ord_sta_id) ? "disabled" : "";
                string js_func = "$.ajax({ url: '/Order/Complete" + statusNameDict[status] + "', type: 'Post', data: { 'order_id': '" + order_id + "' }, success: resp => { console.log(resp); location.reload(); } });";
                e.Value = $"<button class='btn btn-outline-success' {to_disable} onclick=\"{js_func}\">Complete {statusNameDict[status]}</button>";
            }
        };

        // Header Set Center
        settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Header.VerticalAlign = VerticalAlign.Middle;

        // Cell Styles Center
        settings.Styles.Cell.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Cell.VerticalAlign = VerticalAlign.Middle;

        // Grid Partial
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = true;

        settings.SetDetailRowTemplateContent(c =>
        {
            Html.RenderAction("OrderItemGridViewPartial", "OrderItem", new { order_id = DataBinder.Eval(c.DataItem, "id") });
        });
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()