@using NtlSystem.Models;
@using System.Collections.Generic;

@{
    dbNtlSystemEntities db = new dbNtlSystemEntities();

    var treeList = Html.DevExpress().TreeList(settings =>
    {
        settings.Name = "UnitTreeList";
        settings.CallbackRouteValues = new { Controller = "Unit", Action = "UnitTreeListPartial" };

        settings.SettingsEditing.AddNewNodeRouteValues = new { Controller = "Unit", Action = "UnitTreeListPartialAddNew" };
        settings.SettingsEditing.UpdateNodeRouteValues = new { Controller = "Unit", Action = "UnitTreeListPartialUpdate" };
        settings.SettingsEditing.DeleteNodeRouteValues = new { Controller = "Unit", Action = "UnitTreeListPartialDelete" };

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.DeleteButton.Visible = true;
        settings.CommandColumn.EditButton.Visible = true;

        settings.KeyFieldName = "id";
        settings.ParentFieldName = "master_unit_id";

        settings.SettingsPager.Visible = true;

        settings.Columns.Add(column =>
        {
            column.FieldName = "name";
        });

        // Unit Type
        settings.Columns.Add(col =>
        {
            col.FieldName = "unit_type_id";
            col.Caption = "Unit Type";

            col.ColumnType = MVCxTreeListColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TNtlUnitTypes.ToList();
            prop.TextField = "name";
            prop.ValueField = "id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        // Master Unit ID
        settings.Columns.Add(col =>
        {
            col.FieldName = "master_unit_id";
            col.Caption = "Master ID";

            col.ColumnType = MVCxTreeListColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TNtlUnits.ToList();
            prop.TextField = "name";
            prop.ValueField = "id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
        });

        // Quantity
        settings.Columns.Add(col =>
        {
            col.FieldName = "quantity";
            col.Caption = "Quantity";

            col.ColumnType = MVCxTreeListColumnType.SpinEdit;
            SpinEditProperties prop = col.PropertiesEdit as SpinEditProperties;
            prop.NumberType = SpinEditNumberType.Integer;
            prop.MinValue = 0;
            prop.MaxValue = 10000000;
            prop.DisplayFormatString = "N0";
        });

        // Total Usage 
        settings.Columns.Add(col =>
        {
            col.FieldName = "total_usage";
            col.Caption = "Total Usage";

            col.ColumnType = MVCxTreeListColumnType.SpinEdit;
            SpinEditProperties prop = col.PropertiesEdit as SpinEditProperties;
            prop.NumberType = SpinEditNumberType.Float;
            prop.MinValue = 0;
            prop.MaxValue = 10000000;
            prop.Increment = 0.1M;
            prop.DisplayFormatString = "N2";

            col.EditFormSettings.Visible = DefaultBoolean.False;
        });


        settings.SettingsPager.Visible = true;
        settings.SettingsSelection.Enabled = true;

        // Header Set Center
        settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Header.VerticalAlign = VerticalAlign.Middle;

        // Cell Styles Center
        settings.Styles.Cell.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Cell.VerticalAlign = VerticalAlign.Middle;

    });

    if (ViewData["EditError"] != null)
    {
        treeList.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@treeList.Bind(Model).GetHtml()